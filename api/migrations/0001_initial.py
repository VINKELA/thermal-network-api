# Generated by Django 5.2.3 on 2025-06-20 13:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=3, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('length', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('network_type', models.CharField(choices=[('district_heating', 'District Heating'), ('district_cooling', 'District Cooling'), ('combined', 'Combined Heating and Cooling')], max_length=100)),
                ('total_length', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Junction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('junction_type', models.CharField(choices=[('tee', 'Tee'), ('cross', 'Cross'), ('y', 'Y'), ('other', 'Other')], max_length=100)),
                ('diameter', models.FloatField()),
                ('material', models.CharField(max_length=100)),
                ('edge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.edge')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='edge',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.network'),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('node_type', models.CharField(choices=[('supply', 'Supply'), ('return', 'Return'), ('junction', 'Junction'), ('consumer', 'Consumer'), ('producer', 'Producer'), ('storage', 'Storage')], max_length=100)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.network')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='edge',
            name='end_node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_edges', to='api.node'),
        ),
        migrations.AddField(
            model_name='edge',
            name='start_node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_edges', to='api.node'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.city')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.country')),
            ],
        ),
        migrations.CreateModel(
            name='Pipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('diameter', models.FloatField()),
                ('length', models.FloatField()),
                ('material', models.CharField(max_length=100)),
                ('insulation_type', models.CharField(blank=True, max_length=100, null=True)),
                ('insulation_thickness', models.FloatField(blank=True, null=True)),
                ('max_pressure', models.FloatField()),
                ('max_temperature', models.FloatField()),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('edge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.edge')),
                ('junction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.junction')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='network',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project'),
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('meter_type', models.CharField(choices=[('heat', 'Heat'), ('cooling', 'Cooling'), ('electricity', 'Electricity'), ('water', 'Water'), ('gas', 'Gas')], max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('installation_date', models.DateField()),
                ('last_calibration', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='junction',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project'),
        ),
        migrations.CreateModel(
            name='HeatPump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('heat_pump_type', models.CharField(choices=[('air_source', 'Air Source'), ('ground_source', 'Ground Source'), ('water_source', 'Water Source'), ('hybrid', 'Hybrid')], max_length=100)),
                ('heating_capacity', models.FloatField()),
                ('cooling_capacity', models.FloatField(blank=True, null=True)),
                ('cop', models.FloatField()),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HeatExchanger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('heat_exchanger_type', models.CharField(choices=[('plate', 'Plate'), ('shell_tube', 'Shell & Tube'), ('double_pipe', 'Double Pipe'), ('other', 'Other')], max_length=100)),
                ('heat_transfer_area', models.FloatField()),
                ('effectiveness', models.FloatField()),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeothermalSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('system_type', models.CharField(choices=[('closed_loop', 'Closed Loop'), ('open_loop', 'Open Loop'), ('direct_exchange', 'Direct Exchange')], max_length=100)),
                ('depth', models.FloatField()),
                ('number_of_boreholes', models.IntegerField()),
                ('total_heating_capacity', models.FloatField()),
                ('total_cooling_capacity', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('building_type', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('industrial', 'Industrial'), ('public', 'Public'), ('other', 'Other')], max_length=100)),
                ('floor_area', models.FloatField(blank=True, null=True)),
                ('heating_demand', models.FloatField(blank=True, null=True)),
                ('cooling_demand', models.FloatField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Boiler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('boiler_type', models.CharField(choices=[('gas', 'Gas'), ('oil', 'Oil'), ('biomass', 'Biomass'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], max_length=100)),
                ('capacity', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fuel_type', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='project',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.province'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.province'),
        ),
        migrations.CreateModel(
            name='Pump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('pump_type', models.CharField(choices=[('circulation', 'Circulation'), ('booster', 'Booster'), ('submersible', 'Submersible'), ('other', 'Other')], max_length=100)),
                ('flow_rate', models.FloatField()),
                ('head', models.FloatField()),
                ('power', models.FloatField()),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('peak_power', models.FloatField()),
                ('area', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('orientation', models.FloatField()),
                ('tilt_angle', models.FloatField()),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('sensor_type', models.CharField(choices=[('temperature', 'Temperature'), ('pressure', 'Pressure'), ('flow', 'Flow'), ('humidity', 'Humidity'), ('energy', 'Energy'), ('other', 'Other')], max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('installation_date', models.DateField()),
                ('last_calibration', models.DateField(blank=True, null=True)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(max_length=20)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ThermalStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('storage_type', models.CharField(choices=[('hot_water', 'Hot Water'), ('phase_change', 'Phase Change'), ('sensible_heat', 'Sensible Heat'), ('other', 'Other')], max_length=100)),
                ('capacity', models.FloatField()),
                ('volume', models.FloatField()),
                ('max_temperature', models.FloatField()),
                ('min_temperature', models.FloatField()),
                ('insulation_type', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('out_of_service', 'Out of Service')], default='operational', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('valve_type', models.CharField(choices=[('gate', 'Gate'), ('ball', 'Ball'), ('butterfly', 'Butterfly'), ('check', 'Check'), ('pressure_reducing', 'Pressure Reducing'), ('other', 'Other')], max_length=100)),
                ('diameter', models.FloatField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('partially_open', 'Partially Open'), ('malfunction', 'Malfunction')], default='closed', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
